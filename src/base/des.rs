use std::sync::{OnceLock};
use std::collections::HashMap;
use crate::constants::*;
use crate::perturb_expansion;


static R_EXPANDED_CACHE: OnceLock<std::sync::Mutex<HashMap<[u8; 2], [[u64; 256]; 4]>>> = OnceLock::new();

/// Generates expanded tables for DES rounds using a salt value for perturbation
///
/// This function creates four 256-element lookup tables (each containing u64 values)
/// that are used to optimize the DES round function computation. The tables are
/// generated by perturbing an expansion table with the provided salt.
///
/// # Arguments
/// * `salt` - A string slice used to perturb the expansion table generation
///
/// # Returns
/// * `[[u64; 256]; 4]` - Four lookup tables (each 256 elements) for DES round computation
fn generate_r_expanded_tables(salt: &str) -> [[u64; 256]; 4] {
    // Use salt to perturb the expansion table
    let expansion_table = perturb_expansion::perturb_expansion(salt);

    let mut table0_8   = [0u64; 256];
    let mut table8_16  = [0u64; 256];
    let mut table16_24 = [0u64; 256];
    let mut table24_32 = [0u64; 256];

    for (i, &n) in expansion_table.iter().enumerate() {
        let local_bit = n%8;
        let mask = 1u64 << i;

        match n/8 {
            0 => for r in 0..256u64 {
                // if ((r >> local_bit) & 1) { apply mask }
                table0_8[r as usize] |= mask & ((r >> local_bit) & 1)<<i;
            },
            1 => for r in 0..256u64 {
                table8_16[r as usize]  |= mask & ((r >> local_bit) & 1)<<i;
            },
            2 => for r in 0..256u64 {
                table16_24[r as usize] |= mask & ((r >> local_bit) & 1)<<i;
            },
            3 => for r in 0..256u64 {
                table24_32[r as usize] |= mask & ((r >> local_bit) & 1)<<i;
            },
            _ => {}
        }
    }

    [ table0_8, table8_16, table16_24, table24_32 ]
}

/// Cached version of generate_r_expanded_tables for performance optimization
pub fn generate_r_expanded_tables_cached(salt: &str) -> [[u64; 256]; 4] {
    // Initialize the global cache once
    let cache = R_EXPANDED_CACHE.get_or_init(|| std::sync::Mutex::new(HashMap::new()));
    let key = [salt.as_bytes()[0], salt.as_bytes()[1]];

    // Check the cache
    { let map = cache.lock().unwrap();
      if let Some(tables) = map.get(&key) {
          return *tables;
      }
    }

    // Not in cache
    let tables = generate_r_expanded_tables(salt);

    // Insert into cache
    { let mut map = cache.lock().unwrap();
      map.insert(key, tables);
    }

    tables
}

/// Performs a single DES round operation
///
/// This function implements one round of the DES algorithm. It takes left and right
/// 32-bit blocks, applies the expansion permutation using precomputed tables,
/// XORs with the round key, and then applies S-box substitutions.
///
/// # Arguments
/// * `l` - Left 32-bit block
/// * `r` - Right 32-bit block
/// * `r_expanded_precomputed` - Precomputed lookup tables for expansion permutation
/// * `k_round` - Round key
///
/// # Returns
/// * `(u32, u32)` - Tuple containing new left and right blocks after the round
fn des_round(l: u32, r: u32, r_expanded_precomputed: &[[u64; 256]; 4], k_round: u64) -> (u32, u32) {
        let k_xor_r_expanded = k_round ^ (
              r_expanded_precomputed[0][ (r     &0xFF) as usize]
            | r_expanded_precomputed[1][((r>> 8)&0xFF) as usize]
            | r_expanded_precomputed[2][((r>>16)&0xFF) as usize]
            | r_expanded_precomputed[3][((r>>24)&0xFF) as usize]);

        let _l = l
            ^ S_VAL[0][( k_xor_r_expanded        & 0x3F) as usize]
            ^ S_VAL[1][((k_xor_r_expanded >>  6) & 0x3F) as usize]
            ^ S_VAL[2][((k_xor_r_expanded >> 12) & 0x3F) as usize]
            ^ S_VAL[3][((k_xor_r_expanded >> 18) & 0x3F) as usize]
            ^ S_VAL[4][((k_xor_r_expanded >> 24) & 0x3F) as usize]
            ^ S_VAL[5][((k_xor_r_expanded >> 30) & 0x3F) as usize]
            ^ S_VAL[6][((k_xor_r_expanded >> 36) & 0x3F) as usize]
            ^ S_VAL[7][((k_xor_r_expanded >> 42) & 0x3F) as usize];

        // Swap L and R
        (r, _l)
}

/// Performs complete DES encryption/decryption on 64-bit data
///
/// This function implements the full DES algorithm for a single 64-bit block.
/// It applies initial permutation, processes 16 rounds of DES computation,
/// swaps left and right blocks at the end, and applies final permutation.
///
/// # Arguments
/// * `data` - 64-bit input data to encrypt
/// * `k` - Array of 16 round keys
/// * `r_expanded_precomputed` - Precomputed lookup tables for expansion permutation
///
/// # Returns
/// * `u64` - 64-bit encrypted block
pub fn des(data: u64, k: &[u64; 16], r_expanded_precomputed: &[[u64; 256]; 4]) -> u64 {
    // Apply initial permutation and separate into left and right parts
    let mut l = INITIAL_L_PRECOMPUTED[0][(data&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[1][((data>> 8)&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[2][((data>>16)&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[3][((data>>24)&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[4][((data>>32)&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[5][((data>>40)&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[6][((data>>48)&0xFF) as usize]
      | INITIAL_L_PRECOMPUTED[7][((data>>56)&0xFF) as usize];

    let mut r = INITIAL_R_PRECOMPUTED[0][(data&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[1][((data>> 8)&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[2][((data>>16)&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[3][((data>>24)&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[4][((data>>32)&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[5][((data>>40)&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[6][((data>>48)&0xFF) as usize]
      | INITIAL_R_PRECOMPUTED[7][((data>>56)&0xFF) as usize];

    // Round 0 through 16
    for round_n in 0..16 {
        (l, r) = des_round(l, r, r_expanded_precomputed, k[round_n]);
    }

    // Swap L and R at the end to allow reversing
    (l, r) = (r, l);

    // Apply final permutation
    return FINAL_L_PRECOMPUTED[0][ (l        & 0xFF) as usize]
         | FINAL_L_PRECOMPUTED[1][((l >>  8) & 0xFF) as usize]
         | FINAL_L_PRECOMPUTED[2][((l >> 16) & 0xFF) as usize]
         | FINAL_L_PRECOMPUTED[3][((l >> 24) & 0xFF) as usize]
         | FINAL_R_PRECOMPUTED[0][ (r        & 0xFF) as usize]
         | FINAL_R_PRECOMPUTED[1][((r >>  8) & 0xFF) as usize]
         | FINAL_R_PRECOMPUTED[2][((r >> 16) & 0xFF) as usize]
         | FINAL_R_PRECOMPUTED[3][((r >> 24) & 0xFF) as usize];
}
